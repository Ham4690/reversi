{"version":3,"sources":["components/Square.js","components/Board.js","components/SoundBgm.js","components/Game.js","components/App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","j","this","squares","renderSquare","React","Component","SoundBgm","state","soundOn","status","Sound","PLAYING","SoundBtnIcon","url","playStatus","IconButton","soundPlay","setState","WeightData","Game","history","Array","fill","stepNumber","blackIsNext","slice","current","length","JSON","parse","stringify","setTimeout","console","log","calculateWinner","flipped","getFlipCells","k","x","y","concat","update","step","canBlackFlip","canFlip","canWhiteFlip","think","highScore","px","py","tmpData","p","q","score","calcWeightData","stoneColor","stoneNum","color","dirs","result","getFlipCellsOneDir","dx","dy","nowColor","push","numBlack","numWhite","isFinish","waitMsec","stMsec","Date","winner","pointBlack","map","move","desc","key","jumpTo","getNumStone","pointWhite","handleClick","myTernPass","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.36884340.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Square(props) {\n    return (\n        <button\n            className=\"square\"\n            onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\nexport default Square\n\n","import React from 'react'\nimport Square from './Square'\n\nclass Board extends React.Component {\n    renderSquare(i, j) {\n        return (\n            <Square\n                value={this.props.squares[i][j]}\n                onClick={() => this.props.onClick(i, j)}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0, 0)}\n                    {this.renderSquare(0, 1)}\n                    {this.renderSquare(0, 2)}\n                    {this.renderSquare(0, 3)}\n                    {this.renderSquare(0, 4)}\n                    {this.renderSquare(0, 5)}\n                    {this.renderSquare(0, 6)}\n                    {this.renderSquare(0, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(1, 0)}\n                    {this.renderSquare(1, 1)}\n                    {this.renderSquare(1, 2)}\n                    {this.renderSquare(1, 3)}\n                    {this.renderSquare(1, 4)}\n                    {this.renderSquare(1, 5)}\n                    {this.renderSquare(1, 6)}\n                    {this.renderSquare(1, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(2, 0)}\n                    {this.renderSquare(2, 1)}\n                    {this.renderSquare(2, 2)}\n                    {this.renderSquare(2, 3)}\n                    {this.renderSquare(2, 4)}\n                    {this.renderSquare(2, 5)}\n                    {this.renderSquare(2, 6)}\n                    {this.renderSquare(2, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3, 0)}\n                    {this.renderSquare(3, 1)}\n                    {this.renderSquare(3, 2)}\n                    {this.renderSquare(3, 3)}\n                    {this.renderSquare(3, 4)}\n                    {this.renderSquare(3, 5)}\n                    {this.renderSquare(3, 6)}\n                    {this.renderSquare(3, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(4, 0)}\n                    {this.renderSquare(4, 1)}\n                    {this.renderSquare(4, 2)}\n                    {this.renderSquare(4, 3)}\n                    {this.renderSquare(4, 4)}\n                    {this.renderSquare(4, 5)}\n                    {this.renderSquare(4, 6)}\n                    {this.renderSquare(4, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(5, 0)}\n                    {this.renderSquare(5, 1)}\n                    {this.renderSquare(5, 2)}\n                    {this.renderSquare(5, 3)}\n                    {this.renderSquare(5, 4)}\n                    {this.renderSquare(5, 5)}\n                    {this.renderSquare(5, 6)}\n                    {this.renderSquare(5, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6, 0)}\n                    {this.renderSquare(6, 1)}\n                    {this.renderSquare(6, 2)}\n                    {this.renderSquare(6, 3)}\n                    {this.renderSquare(6, 4)}\n                    {this.renderSquare(6, 5)}\n                    {this.renderSquare(6, 6)}\n                    {this.renderSquare(6, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(7, 0)}\n                    {this.renderSquare(7, 1)}\n                    {this.renderSquare(7, 2)}\n                    {this.renderSquare(7, 3)}\n                    {this.renderSquare(7, 4)}\n                    {this.renderSquare(7, 5)}\n                    {this.renderSquare(7, 6)}\n                    {this.renderSquare(7, 7)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board","import React from 'react'\nimport Sound from 'react-sound'\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp'\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff'\nimport IconButton from '@material-ui/core/IconButton'\n\nclass SoundBgm extends React.Component {\n  constructor(props) \n  {\n    super(props)\n    this.state = {\n      soundOn: true,\n      status: Sound.status.PLAYING,\n    }\n  }\n\n  render() {\n    const SoundBtnIcon = this.state.soundOn ? <VolumeUpIcon /> : <VolumeOffIcon /> \n\n    return(\n      <div className=\"sound\">\n        <Sound url=\"freetime.mp3\" playStatus={Sound.status.PLAYING} />\n        <IconButton \n          onClick = {() => {\n            const soundPlay = this.state.soundOn ? 'Sound.status.STOPPED' : 'Sound.status.PLAYING'\n            this.setState({\n              soundOn: !this.state.soundOn,\n              status: {soundPlay},\n            })\n          }}\n        >\n          {SoundBtnIcon}\n        </IconButton>\n      </div>\n    )\n\n  }\n  \n\n}\n\nexport default SoundBgm","import React from 'react'\nimport Board from './Board'\nimport SoundBgm from './SoundBgm';\n\nconst BLACK = true;\nconst WHITE = false;\nconst WeightData = [\n  [ 30,-12,  0, -1, -1,  0,-12, 30],\n  [-12,-15, -3, -3, -3, -3,-15,-12],\n  [  0, -3,  0, -1, -1,  0, -3,  0],\n  [ -1, -3, -1, -1, -1, -1, -3, -1],\n  [ -1, -3, -1, -1, -1, -1, -3, -1],\n  [  0, -3,  0, -1, -1,  0, -3,  0],\n  [-12,-15, -3, -3, -3, -3,-15,-12],\n  [ 30,-12,  0, -1, -1,  0,-12, 30]\n]\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: [\n            Array(8).fill(null),\n            Array(8).fill(null),\n            Array(8).fill(null),\n            [null, null, null, '○', '●', null, null, null],\n            [null, null, null, '●', '○', null, null, null],\n            Array(8).fill(null),\n            Array(8).fill(null),\n            Array(8).fill(null)\n          ],\n        }\n      ],\n      stepNumber: 0,\n      blackIsNext: true,\n    };\n  }\n\n  handleClick(i, j) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = JSON.parse(JSON.stringify(current.squares), setTimeout(() => { JSON.parse(JSON.stringify(current.squares)) }, 0));\n    console.log(squares);\n\n    // when game finish , cannot put stone\n    if (this.calculateWinner(squares)) {\n      return;\n    }\n\n    /* check you can put stone and, check Flip stone */\n    const flipped = this.getFlipCells(i, j, this.state.blackIsNext, squares);\n    if (flipped.length > 0) {\n      squares[i][j] = this.state.blackIsNext ? '●' : '○';\n      for (let k = 0; k < flipped.length; k++) {\n        let x = flipped[k][0];\n        let y = flipped[k][1];\n        squares[x][y] = this.state.blackIsNext ? '●' : '○';\n      }\n      console.log(this.state.blackIsNext)\n      this.setState({\n        history: history.concat([{\n          squares: squares,\n        }]),\n        stepNumber: history.length,\n        blackIsNext: !this.state.blackIsNext,\n      });\n\n      this.update(squares, !this.state.blackIsNext);\n    }\n  }\n\n  jumpTo(step) {\n    console.log(\"step\")\n    console.log(step)\n    if(step >= 0) {\n      this.setState({\n        stepNumber: step,\n        blackIsNext: BLACK,\n      });\n    }\n  }\n\n  update(squares, blackIsNext) {\n\n    let canBlackFlip = this.canFlip(BLACK, squares);\n    let canWhiteFlip = this.canFlip(WHITE, squares);\n\n    if (!canBlackFlip) {\n      this.setState({\n        blackIsNext: false\n      });\n    } else if (!canWhiteFlip) {\n      this.setState({\n        blackIsNext: true\n      });\n    }\n    // CPU\n    if (!blackIsNext) {\n      console.log(\"CPU\");\n      setTimeout(this.think(squares), 1000);\n    }\n  }\n\n  // CPU \n  think(squares) {\n    let highScore = -1000;\n    let px = -1, py = -1;\n    let tmpData = []\n    let flipCheckFlag = false;\n\n    for (let x = 0; x < 8; x++) {\n      for (let y = 0; y < 8; y++) {\n        let flipped = this.getFlipCells(x, y, WHITE, squares);\n        if (flipped.length > 0) {\n          tmpData = JSON.parse(JSON.stringify(squares), setTimeout(() => { JSON.parse(JSON.stringify(squares)) }, 0));\n          for (let i = 0; i < flipped.length; i++) {\n            let p = flipped[i][0];\n            let q = flipped[i][1];\n            tmpData[p][q] = '○';\n            tmpData[x][y] = '○';\n          }\n          let score = this.calcWeightData(tmpData);\n          if (score > highScore) {\n            highScore = score;\n            px = x;\n            py = y;\n          }\n        }\n      }\n    }\n\n    // console.log(\"max-positon px:\" + px + \",py:\" + py);\n\n    if (px >= 0 && py >= 0) {\n      let flipped = this.getFlipCells(px, py, WHITE, squares);\n      if (flipped.length > 0) {\n        console.log(\"cpu put!!\");\n        let tmpData = JSON.parse(JSON.stringify(squares));\n        tmpData[px][py] = '○';\n        for (let k = 0; k < flipped.length; k++) {\n          let x = flipped[k][0];\n          let y = flipped[k][1];\n          tmpData[x][y] = '○';\n        }\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        this.setState({\n          history: history.concat([{\n            squares: tmpData,\n          }]),\n          stepNumber: history.length,\n          blackIsNext: BLACK,\n        });\n      }\n    }\n  }\n\n\n\n  /* weight update (for CPU)*/\n  calcWeightData(tmpData) {\n    let score = 0;\n    for (let x = 0; x < 8; x++) {\n      for (let y = 0; y < 8; y++) {\n        if (tmpData[x][y] === '○') {\n          score += WeightData[x][y];\n        }\n      }\n    }\n    return score;\n  }\n\n  getNumStone(blackIsNext, squares) {\n    let stoneColor = blackIsNext ? '●' : '○';\n    let stoneNum = 0;\n\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        if (squares[i][j] === stoneColor)\n          stoneNum++;\n      }\n    }\n    return stoneNum;\n  }\n\n  getFlipCells(i, j, color, squares) {\n    // すでに石が置いてある場合\n    if (squares[i][j] != null) {\n      return [];\n    }\n\n    const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n    let result = [];\n    let flipped\n\n    for (let p = 0; p < dirs.length; p++) {\n      flipped = this.getFlipCellsOneDir(i, j, dirs[p][0], dirs[p][1], color, squares);\n      result = result.concat(flipped);\n    }\n    return result;\n  }\n\n  getFlipCellsOneDir(i, j, dx, dy, color, squares) {\n\n    let x = i + dx;\n    let y = j + dy;\n    let flipped = [];\n    let nowColor = color ? '●' : '○';\n\n    // ボード外、隣が同色、または何も置かれていない場合失敗\n    if (x < 0 || y < 0 || x > 7 || y > 7 || squares[x][y] === nowColor || squares[x][y] === null) {\n      return [];\n    }\n\n    // 挟める場合はそれをflippedへ追加\n    flipped.push([x, y]);\n\n    while (true) {\n      x += dx;\n      y += dy;\n      // ボード外、または挟む先に何も置かれていない場合は失敗\n      if (x < 0 || y < 0 || x > 7 || y > 7 || squares[x][y] === null) {\n        return [];\n      }\n      // 挟む始まりと終わりの石の色が一緒の時成功\n      if (squares[x][y] === nowColor) {\n        return flipped;\n      } else {\n        flipped.push([x, y]);\n      }\n    }\n  }\n\n  canFlip(color, squares) {\n    let flipped\n    for (let x = 0; x < 8; x++) {\n      for (let y = 0; y < 8; y++) {\n        flipped = this.getFlipCells(x, y, color, squares);\n        if (flipped.length > 0)\n          return true;\n      }\n    }\n    return false;\n  }\n\n  isFinish(numBlack, numWhite, squares) {\n    let canBlackFlip = this.canFlip(BLACK, squares);\n    let canWhiteFlip = this.canFlip(WHITE, squares);\n    if (numBlack + numWhite === 64 || (!canBlackFlip && !canWhiteFlip)) {\n      return true;\n    }\n    return false;\n  }\n\n  calculateWinner(squares) {\n    let numWhite = 0;\n    let numBlack = 0;\n    for (let x = 0; x < 8; x++) {\n      for (let y = 0; y < 8; y++) {\n        if (squares[x][y] === '●')\n          numBlack++;\n\n        if (squares[x][y] === '○')\n          numWhite++;\n      }\n    }\n\n    if (this.isFinish(numBlack, numWhite, squares)) {\n      if (numBlack > numWhite) {\n        return '●';\n      }\n      if (numWhite > numBlack) {\n        return '○';\n      }\n    }\n    return null;\n  }\n\n  myTernPass() {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = JSON.parse(JSON.stringify(current.squares));\n    this.update(squares, !this.state.blackIsNext);\n  }\n\n  waitTime(waitMsec) {\n    let stMsec = new Date();\n    while (new Date() - stMsec < waitMsec);\n  }\n\n  render() {\n    const history = this.state.history\n    const current = history[this.state.stepNumber]\n    const winner = this.calculateWinner(current.squares)\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start'\n\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    let pointBlack = this.getNumStone(BLACK, current.squares);\n    let pointWhite = this.getNumStone(WHITE, current.squares);\n\n    if (winner) {\n      status = 'Winner: ' + winner + '!!! :)';\n    } else {\n      status = 'Next player: ' + (this.state.blackIsNext ? '●' : '○');\n    }\n\n    return (\n      <div className=\"game\">\n        <SoundBgm />\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i, j) => this.handleClick(i, j)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={() => this.myTernPass() }>PASS</button>\n          <div>BLACK:{pointBlack}</div>\n          <div>WHITE:{pointWhite}</div>\n          <button onClick={() => this.jumpTo(this.state.stepNumber - 1)  }> Back </button>\n          <button onClick={() => {\n            if(this.state.stepNumber < history.length - 1) {\n              this.jumpTo(this.state.stepNumber + 1)}  \n            }\n          }> \n            Next \n          </button>\n          <button onClick={() => this.jumpTo(0)}>Reset</button>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nexport default Game","import React from 'react'\nimport Game from './Game'\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Game />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(('root')))\n\nserviceWorker.unregister();"],"sourceRoot":""}