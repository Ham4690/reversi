{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","j","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","blackIsNext","init","slice","length","setState","concat","calculateWinner","flipped","getFlipCells","k","x","y","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","color","dirs","result","p","getFlipCellsOneDir","dx","dy","nowColor","push","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.963b7a28.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst BLACK = true;\nconst WHITE = false;\n\n\nfunction Square(props) {\n    return (\n        <button \n            className=\"square\"\n            onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\n\nclass Board extends React.Component {\n    renderSquare(i,j) {\n        return (\n            <Square \n                value={this.props.squares[i][j]} \n                onClick={() => this.props.onClick(i,j)}    \n            />\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0,0)}\n                    {this.renderSquare(0,1)}\n                    {this.renderSquare(0,2)}\n                    {this.renderSquare(0,3)}\n                    {this.renderSquare(0,4)}\n                    {this.renderSquare(0,5)}\n                    {this.renderSquare(0,6)}\n                    {this.renderSquare(0,7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(1,0)}\n                    {this.renderSquare(1,1)}\n                    {this.renderSquare(1,2)}\n                    {this.renderSquare(1,3)}\n                    {this.renderSquare(1,4)}\n                    {this.renderSquare(1,5)}\n                    {this.renderSquare(1,6)}\n                    {this.renderSquare(1,7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(2,0)}\n                    {this.renderSquare(2,1)}\n                    {this.renderSquare(2,2)}\n                    {this.renderSquare(2,3)}\n                    {this.renderSquare(2,4)}\n                    {this.renderSquare(2,5)}\n                    {this.renderSquare(2,6)}\n                    {this.renderSquare(2,7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3,0)}\n                    {this.renderSquare(3,1)}\n                    {this.renderSquare(3,2)}\n                    {this.renderSquare(3,3)}\n                    {this.renderSquare(3,4)}\n                    {this.renderSquare(3,5)}\n                    {this.renderSquare(3,6)}\n                    {this.renderSquare(3,7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(4,0)}\n                    {this.renderSquare(4,1)}\n                    {this.renderSquare(4,2)}\n                    {this.renderSquare(4,3)}\n                    {this.renderSquare(4,4)}\n                    {this.renderSquare(4,5)}\n                    {this.renderSquare(4,6)}\n                    {this.renderSquare(4,7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(5,0)}\n                    {this.renderSquare(5,1)}\n                    {this.renderSquare(5,2)}\n                    {this.renderSquare(5,3)}\n                    {this.renderSquare(5,4)}\n                    {this.renderSquare(5,5)}\n                    {this.renderSquare(5,6)}\n                    {this.renderSquare(5,7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6,0)}\n                    {this.renderSquare(6,1)}\n                    {this.renderSquare(6,2)}\n                    {this.renderSquare(6,3)}\n                    {this.renderSquare(6,4)}\n                    {this.renderSquare(6,5)}\n                    {this.renderSquare(6,6)}\n                    {this.renderSquare(6,7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(7,0)}\n                    {this.renderSquare(7,1)}\n                    {this.renderSquare(7,2)}\n                    {this.renderSquare(7,3)}\n                    {this.renderSquare(7,4)}\n                    {this.renderSquare(7,5)}\n                    {this.renderSquare(7,6)}\n                    {this.renderSquare(7,7)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: [\n                        Array(8).fill(null),\n                        Array(8).fill(null),\n                        Array(8).fill(null),\n                        Array(8).fill(null),\n                        Array(8).fill(null),\n                        Array(8).fill(null),\n                        Array(8).fill(null),\n                        Array(8).fill(null)],\n\n            }],\n            stepNumber: 0,\n            blackIsNext: true,\n        };\n        this.init();\n    }\n\n    init() {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        squares[3][3] =  '●';\n        squares[3][4] =  '○';\n        squares[4][3] =  '○';\n        squares[4][4] =  '●';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n            }]),\n            stepNumber: history.length,\n            blackIsNext: !this.state.blackIsNext,\n        });\n    }\n\n    handleClick(i,j) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i][j]) {\n            return;\n        }\n\n        /* check you can put stone and, check Flip stone */\n        const flipped = getFlipCells(i, j, this.state.blackIsNext, squares);\n        if ( flipped.length > 0) {\n            squares[i][j] = this.state.blackIsNext ? '●' : '○';\n            for (let k = 0; k < flipped.length; k++) {\n                let x = flipped[k][0]; \n                let y = flipped[k][1]; \n                squares[x][y] = this.state.blackIsNext ? '●' : '○';\n            }\n\n            this.setState({\n                history: history.concat([{\n                    squares: squares,\n                }]),\n                stepNumber: history.length,\n                blackIsNext: !this.state.blackIsNext,\n            });\n            /* update check */\n        }\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            blackIsNext: (step % 2) == 0,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Go to move #' + move :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.blackIsNext ? '●' : '○');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board \n                        squares={current.squares}\n                        onClick={(i,j) => this.handleClick(i,j)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\nfunction update(squares) {\n    let numWhite = 0;\n    let numBlack = 0;\n    for( let x = 0; x < 8; x++) {\n        for( let y = 0; y < 8; y++) {\n           if(squares[x][y] === '●')\n                numBlack++;\n\n           if(squares[x][y] === '○')\n                numWhite++;\n        }\n    }\n\n    let canBlackFlip = canFlip(BLACK, squares); \n    let canWhiteFlip = canFlip(WHITE, squares);\n/***** \n    if (numBlack + numWhite == 64 || (!canBlackFlip && !canWhiteFlip)) {\n    }\n******/\n    if (!canBlackFlip) {\n        this.setState({\n            blackIsNext: false\n        });\n    }else if(!canWhiteFlip) {\n        this.setState({\n            blackIsNext: true\n        });\n    }\n}\n\nfunction getFlipCells(i, j, color, squares) {\n    if (squares[i][j] != null) {\n        return [];\n    }\n\n    const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n    let result = [];\n    for (let p = 0 ; p < dirs.length ; p++) {\n        let flipped = getFlipCellsOneDir(i, j, dirs[p][0], dirs[p][1], color, squares);\n        result = result.concat(flipped);\n    }\n    return result;\n}\n\nfunction getFlipCellsOneDir(i, j, dx, dy, color, squares) {\n    let x = i + dx;\n    let y = j + dy;\n    let flipped = [];\n    let nowColor = color ? '●' : '○' ; \n\n    if(x < 0 || y < 0 || x > 7 || y > 7 || squares[x][y] === nowColor || squares[x][y] === null) {\n        return [];\n    } \n    flipped.push([x,y]);\n    while(true) {\n        x += dx;\n        y += dy;\n        if(x < 0 || y < 0 || x > 7 || y > 7 ||  squares[x][y] === null) {\n            return [];\n        }\n        if (squares[x][y] === nowColor) {\n            return flipped;\n        } else {\n            flipped.push([x,y]);\n        }\n    }\n}\n\nfunction canFlip(color, squares) {\n    for (let x = 0 ; x < 8 ; x++) {\n        for (let y = 0; y < 8; y++) {\n            let flipped = getFlipCells(x, y, color, squares);\n            if (flipped.length > 0) \n                return true;\n        }\n    }\n    return false;\n}\n\n/*cpu が まだ */\n/* 勝利条件がまだ */\nfunction calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }"],"sourceRoot":""}