{"version":3,"sources":["index.js"],"names":["WeightData","Square","props","className","onClick","value","Board","i","j","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","blackIsNext","slice","current","length","JSON","parse","stringify","setTimeout","console","log","calculateWinner","flipped","getFlipCells","k","x","y","setState","concat","update","step","numBlack","numWhite","canBlackFlip","canFlip","canWhiteFlip","think","highScore","px","py","tmpData","toString","p","q","score","calcWeightData","status","winner","moves","map","move","desc","key","jumpTo","pointBlack","getNumStone","pointWhite","handleClick","stoneColor","stoneNum","color","dirs","result","getFlipCellsOneDir","dx","dy","nowColor","push","isFinish","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a429417.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst BLACK = true;\nconst WHITE = false;\nconst WeightData = [\n    [30, -12, 0, -1, -1, 0, -12, 30],\n    [-12, -15, -3, -3, -3, -3, -15, -12],\n    [0, -3, 0, -1, -1, 0, -3, 0],\n    [-1, -3, -1, -1, -1, -1, -3, -1],\n    [-1, -3, -1, -1, -1, -1, -3, -1],\n    [0, -3, 0, -1, -1, 0, -3, 0],\n    [-12, -15, -3, -3, -3, -3, -15, -12],\n    [30, -12, 0, -1, -1, 0, -12, 30]\n];\n\n\nfunction Square(props) {\n    return (\n        <button\n            className=\"square\"\n            onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\n\nclass Board extends React.Component {\n    renderSquare(i, j) {\n        return (\n            <Square\n                value={this.props.squares[i][j]}\n                onClick={() => this.props.onClick(i, j)}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0, 0)}\n                    {this.renderSquare(0, 1)}\n                    {this.renderSquare(0, 2)}\n                    {this.renderSquare(0, 3)}\n                    {this.renderSquare(0, 4)}\n                    {this.renderSquare(0, 5)}\n                    {this.renderSquare(0, 6)}\n                    {this.renderSquare(0, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(1, 0)}\n                    {this.renderSquare(1, 1)}\n                    {this.renderSquare(1, 2)}\n                    {this.renderSquare(1, 3)}\n                    {this.renderSquare(1, 4)}\n                    {this.renderSquare(1, 5)}\n                    {this.renderSquare(1, 6)}\n                    {this.renderSquare(1, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(2, 0)}\n                    {this.renderSquare(2, 1)}\n                    {this.renderSquare(2, 2)}\n                    {this.renderSquare(2, 3)}\n                    {this.renderSquare(2, 4)}\n                    {this.renderSquare(2, 5)}\n                    {this.renderSquare(2, 6)}\n                    {this.renderSquare(2, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3, 0)}\n                    {this.renderSquare(3, 1)}\n                    {this.renderSquare(3, 2)}\n                    {this.renderSquare(3, 3)}\n                    {this.renderSquare(3, 4)}\n                    {this.renderSquare(3, 5)}\n                    {this.renderSquare(3, 6)}\n                    {this.renderSquare(3, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(4, 0)}\n                    {this.renderSquare(4, 1)}\n                    {this.renderSquare(4, 2)}\n                    {this.renderSquare(4, 3)}\n                    {this.renderSquare(4, 4)}\n                    {this.renderSquare(4, 5)}\n                    {this.renderSquare(4, 6)}\n                    {this.renderSquare(4, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(5, 0)}\n                    {this.renderSquare(5, 1)}\n                    {this.renderSquare(5, 2)}\n                    {this.renderSquare(5, 3)}\n                    {this.renderSquare(5, 4)}\n                    {this.renderSquare(5, 5)}\n                    {this.renderSquare(5, 6)}\n                    {this.renderSquare(5, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6, 0)}\n                    {this.renderSquare(6, 1)}\n                    {this.renderSquare(6, 2)}\n                    {this.renderSquare(6, 3)}\n                    {this.renderSquare(6, 4)}\n                    {this.renderSquare(6, 5)}\n                    {this.renderSquare(6, 6)}\n                    {this.renderSquare(6, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(7, 0)}\n                    {this.renderSquare(7, 1)}\n                    {this.renderSquare(7, 2)}\n                    {this.renderSquare(7, 3)}\n                    {this.renderSquare(7, 4)}\n                    {this.renderSquare(7, 5)}\n                    {this.renderSquare(7, 6)}\n                    {this.renderSquare(7, 7)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n                {\n                    squares: [\n                        Array(8).fill(null),\n                        Array(8).fill(null),\n                        Array(8).fill(null),\n                        [null, null, null, '○', '●', null, null, null],\n                        [null, null, null, '●', '○', null, null, null],\n                        Array(8).fill(null),\n                        Array(8).fill(null),\n                        Array(8).fill(null)\n                    ],\n                }\n            ],\n            stepNumber: 0,\n            blackIsNext: true,\n        };\n    }\n\n    handleClick(i, j) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = JSON.parse(JSON.stringify(current.squares), setTimeout(() => { JSON.parse(JSON.stringify(current.squares)) }, 0));\n        console.log(squares);\n\n        // when game finish , cannot put stone\n        if (calculateWinner(squares)) {\n            return;\n        }\n\n        /* check you can put stone and, check Flip stone */\n        const flipped = getFlipCells(i, j, this.state.blackIsNext, squares);\n        if (flipped.length > 0) {\n            squares[i][j] = this.state.blackIsNext ? '●' : '○';\n            for (let k = 0; k < flipped.length; k++) {\n                let x = flipped[k][0];\n                let y = flipped[k][1];\n                squares[x][y] = this.state.blackIsNext ? '●' : '○';\n            }\n\n            this.setState({\n                history: history.concat([{\n                    squares: squares,\n                }]),\n                stepNumber: history.length,\n                blackIsNext: !this.state.blackIsNext,\n            });\n\n            this.update(squares, !this.state.blackIsNext);\n        }\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            blackIsNext: (step % 2) === 0,\n        });\n    }\n\n    update(squares, blackIsNext) {\n        let numWhite = 0;\n        let numBlack = 0;\n        for (let x = 0; x < 8; x++) {\n            for (let y = 0; y < 8; y++) {\n                if (squares[x][y] === '●')\n                    numBlack++;\n\n                if (squares[x][y] === '○')\n                    numWhite++;\n            }\n        }\n\n        let canBlackFlip = canFlip(BLACK, squares);\n        let canWhiteFlip = canFlip(WHITE, squares);\n\n        if (!canBlackFlip) {\n            this.setState({\n                blackIsNext: false\n            });\n        } else if (!canWhiteFlip) {\n            this.setState({\n                blackIsNext: true\n            });\n        }\n        // CPU\n        if(!blackIsNext) {\n            console.log(\"CPU\");\n            setTimeout(this.think(squares), 1000);\n        }\n    }\n\n    // CPU \n    think(squares) {\n        let highScore = -1000;\n        let px = -1, py = -1;\n        let tmpData = []\n        let flipCheckFlag = false;\n\n        console.log('think');\n        console.log(squares);\n        // waitTime(500);\n\n        for (let x = 0; x < 8; x++) {\n            for (let y = 0; y < 8; y++) {\n                let flipped = getFlipCells(x, y, WHITE, squares);\n                if (flipped.length > 0) {\n                    tmpData = JSON.parse(JSON.stringify(squares), setTimeout(() => { JSON.parse(JSON.stringify(squares)) }, 0));\n                    console.log(\"tmpData,x:\"+x.toString()+\",y:\"+y.toString());\n                    console.log(tmpData);\n                    for (let i = 0; i < flipped.length; i++) {\n                        let p = flipped[i][0];\n                        let q = flipped[i][1];\n                        tmpData[p][q] = '○';\n                        tmpData[x][y] = '○';\n                    }\n                    let score = calcWeightData(tmpData);\n                    if (score > highScore) {\n                        highScore = score;\n                        px = x;\n                        py = y;\n                    }\n                }\n            }\n        }\n\n        console.log(\"max-positon px:\" + px + \",py:\" + py);\n\n        if (px >= 0 && py >= 0) {\n            let flipped = getFlipCells(px, py, WHITE, squares);\n            if (flipped.length > 0) {\n                console.log(\"cpu put!!\");\n                let tmpData = JSON.parse(JSON.stringify(squares));\n                tmpData[px][py] = '○';\n                for (let k = 0; k < flipped.length; k++) {\n                    let x = flipped[k][0];\n                    let y = flipped[k][1];\n                    tmpData[x][y] = '○';\n                }\n                const history = this.state.history.slice(0, this.state.stepNumber + 1);\n                this.setState({\n                    history: history.concat([{\n                        squares: tmpData,\n                    }]),\n                    stepNumber: history.length,\n                    blackIsNext: BLACK,\n                });\n            }\n        }\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n        const moves = history.map((step, move) => {\n            const desc = move ? 'Go to move #' + move : 'Go to game start';\n\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n\n        });\n\n        let status;\n        let pointBlack = getNumStone(BLACK, current.squares);\n        let pointWhite = getNumStone(WHITE, current.squares);\n        if (winner) {\n            status = 'Winner: ' + winner +'!!! :)';\n        } else {\n            status = 'Next player: ' + (this.state.blackIsNext ? '●' : '○');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={(i, j) => this.handleClick(i, j)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <div>BLACK:{pointBlack}</div>\n                    <div>WHITE:{pointWhite}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\n/* weight update (for CPU)*/\nfunction calcWeightData(tmpData) {\n    let score = 0;\n    for (let x = 0; x < 8; x++) {\n        for (let y = 0; y < 8; y++) {\n            if (tmpData[x][y] === '○') {\n                score += WeightData[x][y];\n            }\n        }\n    }\n    return score;\n}\n\nfunction getNumStone(blackIsNext, squares){\n    let stoneColor = blackIsNext ? '●' : '○' ;\n    let stoneNum = 0;\n\n    for(let i = 0; i < 8; i++) {\n        for(let j = 0; j < 8; j++) {\n            if(squares[i][j] === stoneColor)\n                stoneNum++;\n        }\n    }\n    return stoneNum;\n}\n\nfunction getFlipCells(i, j, color, squares) {\n    // すでに石が置いてある場合\n    if (squares[i][j] != null) {\n        return [];\n    }\n\n    const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n    let result = [];\n    let flipped\n\n    for (let p = 0; p < dirs.length; p++) {\n        flipped = getFlipCellsOneDir(i, j, dirs[p][0], dirs[p][1], color, squares);\n        result = result.concat(flipped);\n    }\n    return result;\n}\n\nfunction getFlipCellsOneDir(i, j, dx, dy, color, squares) {\n    let x = i + dx;\n    let y = j + dy;\n    let flipped = [];\n    let nowColor = color ? '●' : '○';\n\n    // ボード外、隣が同色、または何も置かれていない場合失敗\n    if (x < 0 || y < 0 || x > 7 || y > 7 || squares[x][y] === nowColor || squares[x][y] === null) {\n        return [];\n    }\n\n    // 挟める場合はそれをflippedへ追加\n    flipped.push([x, y]);\n\n    while (true) {\n        x += dx;\n        y += dy;\n        // ボード外、または挟む先に何も置かれていない場合は失敗\n        if (x < 0 || y < 0 || x > 7 || y > 7 || squares[x][y] === null) {\n            return [];\n        }\n        // 挟む始まりと終わりの石の色が一緒の時成功\n        if (squares[x][y] === nowColor) {\n            return flipped;\n        } else {\n            flipped.push([x, y]);\n        }\n    }\n}\n\nfunction canFlip(color, squares) {\n    let flipped\n    for (let x = 0; x < 8; x++) {\n        for (let y = 0; y < 8; y++) {\n            flipped = getFlipCells(x, y, color, squares);\n            if (flipped.length > 0)\n                return true;\n        }\n    }\n    return false;\n}\n\nfunction isFinish(numBlack, numWhite, squares) {\n    let canBlackFlip = canFlip(BLACK, squares);\n    let canWhiteFlip = canFlip(WHITE, squares);\n    if (numBlack + numWhite === 64 || (!canBlackFlip && !canWhiteFlip)) {\n        return true;\n    }\n    return false;\n}\n\nfunction calculateWinner(squares) {\n    let numWhite = 0;\n    let numBlack = 0;\n    for (let x = 0; x < 8; x++) {\n        for (let y = 0; y < 8; y++) {\n            if (squares[x][y] === '●')\n                numBlack++;\n\n            if (squares[x][y] === '○')\n                numWhite++;\n        }\n    }\n\n    if (isFinish(numBlack, numWhite, squares)) {\n        if (numBlack > numWhite) {\n            return '●';\n        }\n        if (numWhite > numBlack) {\n            return '○';\n        }\n    }\n\n    return null;\n}\n\nfunction waitTime(waitMsec) {\n    let stMsec = new Date();\n    while (new Date() - stMsec < waitMsec);\n}"],"sourceRoot":""}