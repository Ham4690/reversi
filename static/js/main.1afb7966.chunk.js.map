{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","components/App.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","j","this","squares","renderSquare","React","Component","WeightData","Game","state","history","Array","fill","stepNumber","blackIsNext","slice","current","length","JSON","parse","stringify","setTimeout","console","log","calculateWinner","flipped","getFlipCells","k","x","y","update","step","setState","canBlackFlip","canFlip","canWhiteFlip","think","highScore","px","py","tmpData","p","q","score","calcWeightData","concat","stoneColor","stoneNum","color","dirs","result","getFlipCellsOneDir","dx","dy","nowColor","push","numBlack","numWhite","isFinish","waitMsec","stMsec","Date","status","winner","pointBlack","map","move","desc","key","jumpTo","getNumStone","pointWhite","handleClick","myTernPass","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1afb7966.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Square(props) {\n    return (\n        <button\n            className=\"square\"\n            onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\nexport default Square\n\n","import React from 'react'\nimport Square from './Square'\n\nclass Board extends React.Component {\n    renderSquare(i, j) {\n        return (\n            <Square\n                value={this.props.squares[i][j]}\n                onClick={() => this.props.onClick(i, j)}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0, 0)}\n                    {this.renderSquare(0, 1)}\n                    {this.renderSquare(0, 2)}\n                    {this.renderSquare(0, 3)}\n                    {this.renderSquare(0, 4)}\n                    {this.renderSquare(0, 5)}\n                    {this.renderSquare(0, 6)}\n                    {this.renderSquare(0, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(1, 0)}\n                    {this.renderSquare(1, 1)}\n                    {this.renderSquare(1, 2)}\n                    {this.renderSquare(1, 3)}\n                    {this.renderSquare(1, 4)}\n                    {this.renderSquare(1, 5)}\n                    {this.renderSquare(1, 6)}\n                    {this.renderSquare(1, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(2, 0)}\n                    {this.renderSquare(2, 1)}\n                    {this.renderSquare(2, 2)}\n                    {this.renderSquare(2, 3)}\n                    {this.renderSquare(2, 4)}\n                    {this.renderSquare(2, 5)}\n                    {this.renderSquare(2, 6)}\n                    {this.renderSquare(2, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3, 0)}\n                    {this.renderSquare(3, 1)}\n                    {this.renderSquare(3, 2)}\n                    {this.renderSquare(3, 3)}\n                    {this.renderSquare(3, 4)}\n                    {this.renderSquare(3, 5)}\n                    {this.renderSquare(3, 6)}\n                    {this.renderSquare(3, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(4, 0)}\n                    {this.renderSquare(4, 1)}\n                    {this.renderSquare(4, 2)}\n                    {this.renderSquare(4, 3)}\n                    {this.renderSquare(4, 4)}\n                    {this.renderSquare(4, 5)}\n                    {this.renderSquare(4, 6)}\n                    {this.renderSquare(4, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(5, 0)}\n                    {this.renderSquare(5, 1)}\n                    {this.renderSquare(5, 2)}\n                    {this.renderSquare(5, 3)}\n                    {this.renderSquare(5, 4)}\n                    {this.renderSquare(5, 5)}\n                    {this.renderSquare(5, 6)}\n                    {this.renderSquare(5, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6, 0)}\n                    {this.renderSquare(6, 1)}\n                    {this.renderSquare(6, 2)}\n                    {this.renderSquare(6, 3)}\n                    {this.renderSquare(6, 4)}\n                    {this.renderSquare(6, 5)}\n                    {this.renderSquare(6, 6)}\n                    {this.renderSquare(6, 7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(7, 0)}\n                    {this.renderSquare(7, 1)}\n                    {this.renderSquare(7, 2)}\n                    {this.renderSquare(7, 3)}\n                    {this.renderSquare(7, 4)}\n                    {this.renderSquare(7, 5)}\n                    {this.renderSquare(7, 6)}\n                    {this.renderSquare(7, 7)}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Board","import React from 'react'\nimport Board from './Board'\n\nconst BLACK = true;\nconst WHITE = false;\nconst WeightData = [\n  [30, -12, 0, -1, -1, 0, -12, 30],\n  [-12, -15, -3, -3, -3, -3, -15, -12],\n  [0, -3, 0, -1, -1, 0, -3, 0],\n  [-1, -3, -1, -1, -1, -1, -3, -1],\n  [-1, -3, -1, -1, -1, -1, -3, -1],\n  [0, -3, 0, -1, -1, 0, -3, 0],\n  [-12, -15, -3, -3, -3, -3, -15, -12],\n  [30, -12, 0, -1, -1, 0, -12, 30]\n]\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: [\n            Array(8).fill(null),\n            Array(8).fill(null),\n            Array(8).fill(null),\n            [null, null, null, '○', '●', null, null, null],\n            [null, null, null, '●', '○', null, null, null],\n            Array(8).fill(null),\n            Array(8).fill(null),\n            Array(8).fill(null)\n          ],\n        }\n      ],\n      stepNumber: 0,\n      blackIsNext: true,\n    };\n  }\n\n  handleClick(i, j) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = JSON.parse(JSON.stringify(current.squares), setTimeout(() => { JSON.parse(JSON.stringify(current.squares)) }, 0));\n    console.log(squares);\n\n    // when game finish , cannot put stone\n    if (this.calculateWinner(squares)) {\n      return;\n    }\n\n    /* check you can put stone and, check Flip stone */\n    const flipped = this.getFlipCells(i, j, this.state.blackIsNext, squares);\n    if (flipped.length > 0) {\n      squares[i][j] = this.state.blackIsNext ? '●' : '○';\n      for (let k = 0; k < flipped.length; k++) {\n        let x = flipped[k][0];\n        let y = flipped[k][1];\n        squares[x][y] = this.state.blackIsNext ? '●' : '○';\n      }\n      console.log(this.state.blackIsNext)\n      // this.setState({\n      //   history: history.concat([{\n      //     squares: squares,\n      //   }]),\n      //   stepNumber: history.length,\n      //   // blackIsNext: !this.state.blackIsNext,\n      //   blackIsNext: BLACK,\n      // });\n\n      this.update(squares, !this.state.blackIsNext);\n    }\n  }\n\n  jumpTo(step) {\n    console.log(\"step\")\n    console.log(step)\n    if(step >= 0) {\n      this.setState({\n        stepNumber: step,\n        blackIsNext: BLACK,\n      });\n    }\n  }\n\n  update(squares, blackIsNext) {\n\n    let canBlackFlip = this.canFlip(BLACK, squares);\n    let canWhiteFlip = this.canFlip(WHITE, squares);\n\n    if (!canBlackFlip) {\n      this.setState({\n        blackIsNext: false\n      });\n    } else if (!canWhiteFlip) {\n      this.setState({\n        blackIsNext: true\n      });\n    }\n    // CPU\n    if (!blackIsNext) {\n      console.log(\"CPU\");\n      setTimeout(this.think(squares), 1000);\n    }\n  }\n\n  // CPU \n  think(squares) {\n    let highScore = -1000;\n    let px = -1, py = -1;\n    let tmpData = []\n    let flipCheckFlag = false;\n\n    // console.log('think');\n    // console.log(squares);\n    // this.waitTime(500);\n\n    for (let x = 0; x < 8; x++) {\n      for (let y = 0; y < 8; y++) {\n        let flipped = this.getFlipCells(x, y, WHITE, squares);\n        if (flipped.length > 0) {\n          tmpData = JSON.parse(JSON.stringify(squares), setTimeout(() => { JSON.parse(JSON.stringify(squares)) }, 0));\n          // console.log(\"tmpData,x:\" + x.toString() + \",y:\" + y.toString());\n          // console.log(tmpData);\n          for (let i = 0; i < flipped.length; i++) {\n            let p = flipped[i][0];\n            let q = flipped[i][1];\n            tmpData[p][q] = '○';\n            tmpData[x][y] = '○';\n          }\n          let score = this.calcWeightData(tmpData);\n          if (score > highScore) {\n            highScore = score;\n            px = x;\n            py = y;\n          }\n        }\n      }\n    }\n\n    console.log(\"max-positon px:\" + px + \",py:\" + py);\n\n    if (px >= 0 && py >= 0) {\n      let flipped = this.getFlipCells(px, py, WHITE, squares);\n      if (flipped.length > 0) {\n        console.log(\"cpu put!!\");\n        let tmpData = JSON.parse(JSON.stringify(squares));\n        tmpData[px][py] = '○';\n        for (let k = 0; k < flipped.length; k++) {\n          let x = flipped[k][0];\n          let y = flipped[k][1];\n          tmpData[x][y] = '○';\n        }\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        this.setState({\n          history: history.concat([{\n            squares: tmpData,\n          }]),\n          stepNumber: history.length,\n          blackIsNext: BLACK,\n        });\n      }\n    }\n  }\n\n\n\n  /* weight update (for CPU)*/\n  calcWeightData(tmpData) {\n    let score = 0;\n    for (let x = 0; x < 8; x++) {\n      for (let y = 0; y < 8; y++) {\n        if (tmpData[x][y] === '○') {\n          score += WeightData[x][y];\n        }\n      }\n    }\n    return score;\n  }\n\n  getNumStone(blackIsNext, squares) {\n    let stoneColor = blackIsNext ? '●' : '○';\n    let stoneNum = 0;\n\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        if (squares[i][j] === stoneColor)\n          stoneNum++;\n      }\n    }\n    return stoneNum;\n  }\n\n  getFlipCells(i, j, color, squares) {\n    // すでに石が置いてある場合\n    if (squares[i][j] != null) {\n      return [];\n    }\n\n    const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n    let result = [];\n    let flipped\n\n    for (let p = 0; p < dirs.length; p++) {\n      flipped = this.getFlipCellsOneDir(i, j, dirs[p][0], dirs[p][1], color, squares);\n      result = result.concat(flipped);\n    }\n    return result;\n  }\n\n  getFlipCellsOneDir(i, j, dx, dy, color, squares) {\n\n    let x = i + dx;\n    let y = j + dy;\n    let flipped = [];\n    let nowColor = color ? '●' : '○';\n\n    // ボード外、隣が同色、または何も置かれていない場合失敗\n    if (x < 0 || y < 0 || x > 7 || y > 7 || squares[x][y] === nowColor || squares[x][y] === null) {\n      return [];\n    }\n\n    // 挟める場合はそれをflippedへ追加\n    flipped.push([x, y]);\n\n    while (true) {\n      x += dx;\n      y += dy;\n      // ボード外、または挟む先に何も置かれていない場合は失敗\n      if (x < 0 || y < 0 || x > 7 || y > 7 || squares[x][y] === null) {\n        return [];\n      }\n      // 挟む始まりと終わりの石の色が一緒の時成功\n      if (squares[x][y] === nowColor) {\n        return flipped;\n      } else {\n        flipped.push([x, y]);\n      }\n    }\n  }\n\n  canFlip(color, squares) {\n    let flipped\n    for (let x = 0; x < 8; x++) {\n      for (let y = 0; y < 8; y++) {\n        flipped = this.getFlipCells(x, y, color, squares);\n        if (flipped.length > 0)\n          return true;\n      }\n    }\n    return false;\n  }\n\n  isFinish(numBlack, numWhite, squares) {\n    let canBlackFlip = this.canFlip(BLACK, squares);\n    let canWhiteFlip = this.canFlip(WHITE, squares);\n    if (numBlack + numWhite === 64 || (!canBlackFlip && !canWhiteFlip)) {\n      return true;\n    }\n    return false;\n  }\n\n  calculateWinner(squares) {\n    let numWhite = 0;\n    let numBlack = 0;\n    for (let x = 0; x < 8; x++) {\n      for (let y = 0; y < 8; y++) {\n        if (squares[x][y] === '●')\n          numBlack++;\n\n        if (squares[x][y] === '○')\n          numWhite++;\n      }\n    }\n\n    if (this.isFinish(numBlack, numWhite, squares)) {\n      if (numBlack > numWhite) {\n        return '●';\n      }\n      if (numWhite > numBlack) {\n        return '○';\n      }\n    }\n    return null;\n  }\n\n  myTernPass() {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = JSON.parse(JSON.stringify(current.squares));\n    this.update(squares, !this.state.blackIsNext);\n  }\n\n  waitTime(waitMsec) {\n    let stMsec = new Date();\n    while (new Date() - stMsec < waitMsec);\n  }\n\n  render() {\n    const history = this.state.history\n    const current = history[this.state.stepNumber]\n    const winner = this.calculateWinner(current.squares)\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start'\n\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    \n    // console.log(\"nowStep\")\n    // console.log(nowStep)\n\n    let status;\n    let pointBlack = this.getNumStone(BLACK, current.squares);\n    let pointWhite = this.getNumStone(WHITE, current.squares);\n\n    if (winner) {\n      status = 'Winner: ' + winner + '!!! :)';\n    } else {\n      status = 'Next player: ' + (this.state.blackIsNext ? '●' : '○');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i, j) => this.handleClick(i, j)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={() => this.myTernPass() }>PASS</button>\n          <div>BLACK:{pointBlack}</div>\n          <div>WHITE:{pointWhite}</div>\n          <button onClick={() => this.jumpTo(this.state.stepNumber - 1)  }> Back </button>\n          <button onClick={() => {\n            if(this.state.stepNumber < history.length - 1) {\n              this.jumpTo(this.state.stepNumber + 1)}  \n            }\n          }> \n            Next \n          </button>\n          {/* <ol>{moves}</ol> */}\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nexport default Game","import React from 'react'\nimport Game from './Game'\n\nclass App extends React.Component {\n  render() {\n    return <Game />\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById(('root')))"],"sourceRoot":""}