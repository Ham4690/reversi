{"version":3,"sources":["index.js"],"names":["WeightData","Square","props","className","onClick","value","Board","i","j","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","blackIsNext","slice","current","length","JSON","parse","stringify","setTimeout","console","log","calculateWinner","flipped","getFlipCells","k","x","y","setState","concat","update","step","numBlack","numWhite","canBlackFlip","canFlip","canWhiteFlip","highScore","px","py","tmpData","p","q","score","calcWeightData","handleClick","status","winner","moves","map","move","desc","key","jumpTo","color","dirs","result","getFlipCellsOneDir","dx","dy","nowColor","push","isFinish","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0f7a3f6.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst BLACK = true;\nconst WHITE = false;\nconst WeightData = [\n    [ 30, -12,  0, -1, -1,  0, -12,  30],\n    [-12, -15, -3, -3, -3, -3, -15, -12],\n    [  0,  -3,  0, -1, -1,  0,  -3,   0],\n    [ -1,  -3, -1, -1, -1, -1,  -3,  -1],\n    [ -1,  -3, -1, -1, -1, -1,  -3,  -1],\n    [  0,  -3,  0, -1, -1,  0,  -3,   0],\n    [-12, -15, -3, -3, -3, -3, -15, -12],\n    [ 30, -12,  0, -1, -1,  0, -12,  30]\n];\n\n\nfunction Square(props) {\n    return (\n        <button \n            className=\"square\"\n            onClick={props.onClick}\n        >\n            {props.value}\n        </button>\n    );\n}\n\n\nclass Board extends React.Component {\n    renderSquare(i,j) {\n        return (\n            <Square \n                value={this.props.squares[i][j]} \n                onClick={() => this.props.onClick(i,j)}    \n            />\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0,0)}\n                    {this.renderSquare(0,1)}\n                    {this.renderSquare(0,2)}\n                    {this.renderSquare(0,3)}\n                    {this.renderSquare(0,4)}\n                    {this.renderSquare(0,5)}\n                    {this.renderSquare(0,6)}\n                    {this.renderSquare(0,7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(1,0)}\n                    {this.renderSquare(1,1)}\n                    {this.renderSquare(1,2)}\n                    {this.renderSquare(1,3)}\n                    {this.renderSquare(1,4)}\n                    {this.renderSquare(1,5)}\n                    {this.renderSquare(1,6)}\n                    {this.renderSquare(1,7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(2,0)}\n                    {this.renderSquare(2,1)}\n                    {this.renderSquare(2,2)}\n                    {this.renderSquare(2,3)}\n                    {this.renderSquare(2,4)}\n                    {this.renderSquare(2,5)}\n                    {this.renderSquare(2,6)}\n                    {this.renderSquare(2,7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3,0)}\n                    {this.renderSquare(3,1)}\n                    {this.renderSquare(3,2)}\n                    {this.renderSquare(3,3)}\n                    {this.renderSquare(3,4)}\n                    {this.renderSquare(3,5)}\n                    {this.renderSquare(3,6)}\n                    {this.renderSquare(3,7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(4,0)}\n                    {this.renderSquare(4,1)}\n                    {this.renderSquare(4,2)}\n                    {this.renderSquare(4,3)}\n                    {this.renderSquare(4,4)}\n                    {this.renderSquare(4,5)}\n                    {this.renderSquare(4,6)}\n                    {this.renderSquare(4,7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(5,0)}\n                    {this.renderSquare(5,1)}\n                    {this.renderSquare(5,2)}\n                    {this.renderSquare(5,3)}\n                    {this.renderSquare(5,4)}\n                    {this.renderSquare(5,5)}\n                    {this.renderSquare(5,6)}\n                    {this.renderSquare(5,7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6,0)}\n                    {this.renderSquare(6,1)}\n                    {this.renderSquare(6,2)}\n                    {this.renderSquare(6,3)}\n                    {this.renderSquare(6,4)}\n                    {this.renderSquare(6,5)}\n                    {this.renderSquare(6,6)}\n                    {this.renderSquare(6,7)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(7,0)}\n                    {this.renderSquare(7,1)}\n                    {this.renderSquare(7,2)}\n                    {this.renderSquare(7,3)}\n                    {this.renderSquare(7,4)}\n                    {this.renderSquare(7,5)}\n                    {this.renderSquare(7,6)}\n                    {this.renderSquare(7,7)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n                {\n                    squares: [\n                            Array(8).fill(null),\n                            Array(8).fill(null),\n                            Array(8).fill(null),\n                            [null,null,null,'○','●',null,null,null],\n                            [null,null,null,'●','○',null,null,null],\n                            Array(8).fill(null),\n                            Array(8).fill(null),\n                            Array(8).fill(null)\n                    ],\n                }\n            ],\n            stepNumber: 0,\n            blackIsNext: true,\n        };\n    }\n\n    handleClick(i,j) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n\n        //コールスタックが溢れないようにしている\n        const squares = JSON.parse(JSON.stringify(current.squares), setTimeout( () => {JSON.parse(JSON.stringify(current.squares))}, 0));\n        console.log(squares);\n\n        // when game finish , cannot put stone\n        if (calculateWinner(squares) ) {\n            return;\n        }\n\n        /* check you can put stone and, check Flip stone */\n        const flipped = getFlipCells(i, j, this.state.blackIsNext, squares);\n        if ( flipped.length > 0) {\n            squares[i][j] = this.state.blackIsNext ? '●' : '○';\n            for (let k = 0; k < flipped.length; k++) {\n                let x = flipped[k][0]; \n                let y = flipped[k][1]; \n                squares[x][y] = this.state.blackIsNext ? '●' : '○';\n            }\n\n            this.setState({\n                history: history.concat([{\n                    squares: squares,\n                }]),\n                stepNumber: history.length,\n                blackIsNext: !this.state.blackIsNext,\n            });\n\n            this.update(squares, !this.state.blackIsNext);\n        }\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            blackIsNext: (step % 2) === 0,\n        });\n    }\n\n    update(squares, blackIsNext) {\n        let numWhite = 0;\n        let numBlack = 0;\n        for( let x = 0; x < 8; x++) {\n            for( let y = 0; y < 8; y++) {\n            if(squares[x][y] === '●')\n                    numBlack++;\n\n            if(squares[x][y] === '○')\n                    numWhite++;\n            }\n        }\n\n        let canBlackFlip = canFlip(BLACK, squares); \n        let canWhiteFlip = canFlip(WHITE, squares);\n\n        if (!canBlackFlip) {\n            this.setState({\n                blackIsNext: false\n            });\n        }else if(!canWhiteFlip) {\n            this.setState({\n                blackIsNext: true\n            });\n        }\n        // if(!blackIsNext) {\n        //     console.log(\"CPU\");\n        //     setTimeout(this.think(squares), 1000);\n        // }\n    }\n\n\n    think(squares) {\n        let highScore = -1000;\n        let px = -1, py = -1;\n        let tmpData = []\n        let flipCheckFlag = false;\n\n        console.log(squares);\n        // waitTime(500);\n\n        for (let x = 0; x < 8 ; x++) {\n            for (let y = 0; y < 8 ; y++) {\n                let flipped = getFlipCells(x, y, WHITE, squares);\n                if (flipped.length > 0) {\n                    tmpData = JSON.parse(JSON.stringify(squares), setTimeout( () => {JSON.parse(JSON.stringify(squares))}, 0));\n                    console.log(\"tmpData\");\n                    console.log(tmpData);\n                    for (let i = 0; i < flipped.length; i++) {\n                        let p = flipped[i][0];\n                        let q = flipped[i][1];\n                        tmpData[p][q] = '○';\n                        tmpData[x][y] = '○';\n                    }\n                    let score = calcWeightData(tmpData);\n                    if ( score > highScore) {\n                        highScore = score;\n                        px = x;\n                        py = y;\n                    }\n                }\n            }\n        }\n\n        console.log(\"px:\" + px + \",py:\" + py);\n\n        if (px >= 0 && py >= 0) {\n            let flipped = getFlipCells(px, py, WHITE, squares);\n            if (flipped.length > 0) {\n                console.log(\"cpu put!!\");\n                this.handleClick(px, py);\n                let tmpData = JSON.parse(JSON.stringify(squares));\n                tmpData[px][py] = '○';\n                for (let k = 0; k < flipped.length; k++) {\n                    let x = flipped[k][0]; \n                    let y = flipped[k][1]; \n                    tmpData[x][y] = '○';\n                }\n                const history = this.state.history.slice(0, this.state.stepNumber + 1);\n                this.setState({\n                    history: history.concat([{\n                        squares: tmpData,\n                    }]),\n                    stepNumber: history.length,\n                    blackIsNext: BLACK,\n                });\n            }\n        }\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const desc = move ? 'Go to move #' + move : 'Go to game start';\n\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n\n        });\n\n        let status;\n        if (winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.blackIsNext ? '●' : '○');\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board \n                        squares={current.squares}\n                        onClick={(i,j) => this.handleClick(i,j)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\n/* weight update */\nfunction calcWeightData(tmpData) {\n    let score = 0;\n    for (let x = 0; x < 8 ; x++) {\n        for (let y = 0 ; y < 8 ; y++) {\n            if (tmpData[x][y] === '○') {\n                score += WeightData[x][y];\n            }\n        }\n    }\n    return score;\n}\n\n\nfunction getFlipCells(i, j, color, squares) {\n    if (squares[i][j] != null) {\n        return [];\n    }\n\n    const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n    let result = [];\n    for (let p = 0 ; p < dirs.length ; p++) {\n        let flipped = getFlipCellsOneDir(i, j, dirs[p][0], dirs[p][1], color, squares);\n        result = result.concat(flipped);\n    }\n    return result;\n}\n\nfunction getFlipCellsOneDir(i, j, dx, dy, color, squares) {\n    let x = i + dx;\n    let y = j + dy;\n    let flipped = [];\n    let nowColor = color ? '●' : '○' ; \n\n    if(x < 0 || y < 0 || x > 7 || y > 7 || squares[x][y] === nowColor || squares[x][y] === null) {\n        return [];\n    } \n    flipped.push([x,y]);\n    while(true) {\n        x += dx;\n        y += dy;\n        if(x < 0 || y < 0 || x > 7 || y > 7 ||  squares[x][y] === null) {\n            return [];\n        }\n        if (squares[x][y] === nowColor) {\n            return flipped;\n        } else {\n            flipped.push([x,y]);\n        }\n    }\n}\n\nfunction canFlip(color, squares) {\n    for (let x = 0 ; x < 8 ; x++) {\n        for (let y = 0; y < 8; y++) {\n            let flipped = getFlipCells(x, y, color, squares);\n            if (flipped.length > 0) \n                return true;\n        }\n    }\n    return false;\n}\n\n/*cpu が まだ */\n\nfunction isFinish(numBlack, numWhite, squares) {\n    let canBlackFlip = canFlip(BLACK, squares); \n    let canWhiteFlip = canFlip(WHITE, squares);\n    if (numBlack + numWhite === 64 || (!canBlackFlip && !canWhiteFlip)) {\n        return true;\n    }\n    return false;\n}\n\nfunction calculateWinner(squares) {\n    let numWhite = 0;\n    let numBlack = 0;\n    for( let x = 0; x < 8; x++) {\n        for( let y = 0; y < 8; y++) {\n        if(squares[x][y] === '●')\n                numBlack++;\n\n        if(squares[x][y] === '○')\n                numWhite++;\n        }\n    }\n\n    if(isFinish(numBlack, numWhite, squares)) {\n        if(numBlack > numWhite) {\n            return '●';\n        }\n        if(numWhite > numBlack) {\n            return '○';\n        }\n    }\n\n    return null;\n  }\n\n  function waitTime(waitMsec) {\n      let stMsec = new Date();\n      while (new Date() - stMsec < waitMsec);\n  }"],"sourceRoot":""}